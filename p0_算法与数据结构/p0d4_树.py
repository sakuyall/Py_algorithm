"""10/6/25
树
    树是一种可以递归定义的数据结构
    是由n个 节点 组成的集合,在列表那边节点就叫做 元素
    若n>0,则这之中有一个节点是 根节点,其他节点又可以成为新的树,不再下分的节点称为 叶子节点
    结构的层数称为树的 深度(高度) ,节点向下分叉的数量叫做 度,树中节点最大的度作为 树的度
    节点向下分支后,它们互为父子节点,与此同时向下生出的全部节点作为 子树

二叉树
    度不超过2的树
    每个节点最多有两个子节点
    分别成为左孩子节点和右孩子节点
    每层节点数均为满的,节点数达到最大值,这成为 满二叉树
    叶子节点只出现于最下层和次下层,并且最下层节点都集中于该层左侧位置,这成为 完全二叉树
    也可以看作满二叉树最后在右下侧按层数拿走几个节点
    二叉树的存储方式分为顺序存储与链式存储

顺序存储--用列表来存储二叉树
    对于一棵完全二叉树,依次将节点数值按层放入列表中,举个例子:
            9
        8       7
      6   5   0   1
    2  4 3
    对应的列表为:[9, 8, 7, 6, 5, 0, 1, 2, 4, 3]
    标注下标:     0  1  2  3  4  5  6  7  8  9
    在此列表中,父节点与左子节点下标有什么联系?
    0->1 1->3 2->5 3->7 4->9 |  规律为i -> 2i+1
    所以父节点与右子节点规律理所当然就是i -> 2i+2
    又所以父节点的求法就是子节点下标(j-1)//2求得

堆:一种特殊的完全二叉树
    分为大根堆(任意节点都比它的子节点大)和小根堆(反之,任意节点都比子节点小)
    堆排序使用大根堆排序出升序结构

堆的向下调整
节点的左右子树都是堆,但整个自身不是堆(顶上的节点不符合规律)
通过两子节点选大值与父节点交换实现,若仍不满足则继续向下交换
"""